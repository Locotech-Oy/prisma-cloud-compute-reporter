package junit

import (
	"strconv"
	"strings"

	"github.com/Locotech-Oy/prisma-cloud-compute-reporter/internal/parser"
)

// EncodeVulnerabilityReport accepts a single ScanReport and returns a JUnitReport for vulnerabilities
func EncodeVulnerabilityReport(report parser.ScanReport) JUnitReport {

	var testSuites []TestSuite

	vulnerabilitySuite := createVulnerabilitySuiteWithProps(report.Results[0])

	for _, vuln := range report.Results[0].Vulnerabilities {

		if report.Results[0].VulnerabilityScanPassed {
			vulnerabilitySuite.TestCases = append(vulnerabilitySuite.TestCases, createSkippedVTestCase(vuln))
		} else {
			vulnerabilitySuite.TestCases = append(vulnerabilitySuite.TestCases, createFailureVTestCase(vuln))
		}

	}

	testSuites = append(testSuites, vulnerabilitySuite)

	rtn := JUnitReport{
		TestSuites: testSuites,
	}

	return rtn
}

func createFailureVTestCase(vulnerability parser.Vulnerability) TestCase {
	className := "[" + vulnerability.Id + "]"

	return TestCase{
		Name:      className + " " + vulnerability.Description,
		ClassName: vulnerability.PackageName + "_" + vulnerability.PackageVersion,
		Time:      0,
		Failure: &Failure{
			Type:    "vulnerability",
			Message: vulnerability.Description,
			Description: `Severity: ` + vulnerability.Severity + `
Description: ` + vulnerability.Description,
		},
	}
}

func createSkippedVTestCase(vulnerability parser.Vulnerability) TestCase {
	className := "[" + vulnerability.Id + "]"

	return TestCase{
		Name:      className + " " + vulnerability.Description,
		ClassName: vulnerability.PackageName + "_" + vulnerability.PackageVersion,
		Time:      0,
		Skipped: &Skipped{
			Message: vulnerability.Description,
			Description: `Severity: ` + vulnerability.Severity + `
Description: ` + vulnerability.Description + `
CVSS: ` + strconv.FormatFloat(float64(vulnerability.Cvss), 'd', 1, 32) + `
Vector: ` + vulnerability.Vector + `
Package name: ` + vulnerability.PackageName + `
Package version: ` + vulnerability.PackageVersion + `
Impacted versions: ` + strings.Join(vulnerability.ImpactedVersions, ",") + `
Link: ` + vulnerability.Link + `
Risk factors: ` + strings.Join(vulnerability.RiskFactors, ", ") + `
Published date: ` + vulnerability.PublishedDate.Format("2006-01-02T15:04:05") + `
Discovered date: ` + vulnerability.DiscoveredDate.Format("2006-01-02T15:04:05") + `
Fix date: ` + vulnerability.FixDate.Format("2006-01-02T15:04:05") + ``,
		},
	}
}

func createVulnerabilitySuiteWithProps(result parser.Result) TestSuite {
	suite := createTestSuiteWithProps(2, result, "Prisma Cloud vulnerability scan")
	suite.Properties = append(suite.Properties,
		Property{
			Name:  "vulnerabilityScanPassed",
			Value: strconv.FormatBool(result.VulnerabilityScanPassed),
		},
		Property{
			Name:  "vulnerabilityDistribution_critical",
			Value: strconv.FormatInt(int64(result.VulnerabilityDistribution.Critical), 10),
		},
		Property{
			Name:  "vulnerabilityDistribution_high",
			Value: strconv.FormatInt(int64(result.VulnerabilityDistribution.High), 10),
		},
		Property{
			Name:  "vulnerabilityDistribution_medium",
			Value: strconv.FormatInt(int64(result.VulnerabilityDistribution.Medium), 10),
		},
		Property{
			Name:  "vulnerabilityDistribution_low",
			Value: strconv.FormatInt(int64(result.VulnerabilityDistribution.Low), 10),
		},
		Property{
			Name:  "vulnerabilityDistribution_total",
			Value: strconv.FormatInt(int64(result.VulnerabilityDistribution.Total), 10),
		},
	)
	return suite
}
